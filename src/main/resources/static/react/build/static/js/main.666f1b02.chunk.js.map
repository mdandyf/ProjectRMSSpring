{"version":3,"sources":["jsx/App-login.jsx","jsx/App-list.jsx","jsx/App-form.jsx","js/serviceWorker.js","index.js"],"names":["Login","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","setState","defineProperty","target","id","value","handleSubmit","preventDefault","state","errcount","data","FormData","username","password","fetch","method","body","URLSearchParams","then","v","redirected","window","location","url","catch","e","console","warn","handleError","field","errmsg","prevState","failure","errmsgs","objectSpread","bind","assertThisInitialized","error","length","react_default","a","createElement","className","App_login_Content","myUsernameProp","myPasswordProp","mySubmitProp","myChangeProp","myValidationProp","validateForm","myErrorProp","React","Component","Content","params","search","Navbar","inverse","Header","Brand","href","get","onSubmit","FormGroup","controlId","bsSize","ControlLabel","FormControl","autoFocus","type","onChange","Button","bsStyle","block","disabled","List","users","isLoading","userLogin","_this2","response","json","userDetails","App_list_Header","myUserLogin","App_list_ContentList","myUser","myLoading","Collapse","Text","pullRight","Link","ContentList","map","user","App_list_User","key","Panel","Body","Table","striped","bordered","condensed","hover","colSpan","User","name","userName","size","readOnly","Image","rounded","src","FieldGroup","_ref","label","help","objectWithoutProperties","HelpBlock","Form","Modal","Dialog","Title","placeholder","Footer","Boolean","hostname","match","ReactDOM","render","BrowserRouter","Route","exact","path","Redirect","to","component","Home","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.666f1b02.chunk.js","sourcesContent":["import React from 'react';\r\nimport { FormGroup, FormControl, ControlLabel, Button, Navbar } from 'react-bootstrap';\r\nimport PropTypes from 'prop-types';\r\nimport \"../css/login.css\";\r\n\r\nclass Login extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            username: \"\",\r\n            password: \"\"\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n\r\n        if (props.error) {\r\n            this.state = {\r\n                failure: \"Wrong username or password!\",\r\n                errcount: 0\r\n            }\r\n        } else {\r\n            this.state = { errcount: 0 }\r\n        }\r\n    }\r\n\r\n    validateForm() {\r\n        return this.state.username.length > 0 && this.state.password.length > 0;\r\n    }\r\n\r\n    handleChange = event => {\r\n        this.setState({\r\n            [event.target.id]: event.target.value\r\n        });\r\n    }\r\n\r\n    handleSubmit = event => {\r\n        event.preventDefault();\r\n        if (!this.state.errcount) {\r\n            const data = new FormData(this.state.username, this.state.password);\r\n            fetch('http://localhost:8080/login', {\r\n                method: \"POST\",\r\n                body: new URLSearchParams(data)\r\n            }).then(v => {\r\n                if (v.redirected) window.location = v.url\r\n            })\r\n                .catch(e => console.warn(e))\r\n        }\r\n    }\r\n\r\n    handleError = (field, errmsg) => {\r\n        if (!field) return;\r\n\r\n        if (errmsg) {\r\n            this.setState((prevState) => ({\r\n                failure: '',\r\n                errcount: prevState.errcount + 1,\r\n                errmsgs: { ...prevState.errmsgs, [field]: errmsg }\r\n            }))\r\n        } else {\r\n            this.setState((prevState) => ({\r\n                failure: '',\r\n                errcount: prevState.errcount === 1 ? 0 : prevState.errcount - 1,\r\n                errmsgs: { ...prevState.errmsgs, [field]: '' }\r\n            }))\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <Content myUsernameProp={this.state.username} myPasswordProp={this.state.password}\r\n                    mySubmitProp={this.handleSubmit} myChangeProp={this.handleChange}\r\n                    myValidationProp={this.validateForm} myErrorProp={this.handleError} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Content extends React.Component {\r\n    render() {\r\n        const params = new URLSearchParams(window.location.search)\r\n        return (\r\n            <div className=\"Login\">\r\n                <Navbar inverse={true}>\r\n                    <Navbar.Header>\r\n                        <Navbar.Brand>\r\n                            <a href=\"#home\">PT. XYZ - RMS</a>\r\n                        </Navbar.Brand>\r\n                    </Navbar.Header>\r\n                </Navbar>\r\n                <form error={params.get('error')} onSubmit={this.props.mySubmitProp}>\r\n                    <FormGroup controlId=\"username\" bsSize=\"large\">\r\n                        <ControlLabel>User Name</ControlLabel>\r\n                        <FormControl\r\n                            autoFocus\r\n                            type=\"username\"\r\n                            value={this.props.myUsernameProp}\r\n                            onChange={this.props.myChangeProp}\r\n                        />\r\n                    </FormGroup>\r\n                    <FormGroup controlId=\"password\" bsSize=\"large\">\r\n                        <ControlLabel>Password</ControlLabel>\r\n                        <FormControl\r\n                            value={this.props.myPasswordProp}\r\n                            onChange={this.props.myChangeProp}\r\n                            type=\"password\"\r\n                        />\r\n                    </FormGroup>\r\n                    <Button\r\n                        bsStyle=\"primary\"\r\n                        block\r\n                        bsSize=\"large\"\r\n                        disabled={!this.props.myValidationProp}\r\n                        type=\"submit\">\r\n                        Login\r\n                </Button>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Login;","import React from 'react';\r\nimport { Table, Panel, Button, Image, Navbar } from 'react-bootstrap';\r\nimport \"../css/list.css\";\r\n\r\nclass List extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            users: [],\r\n            isLoading: false,\r\n            userLogin: \"Mark Geiger\"\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({ isLoading: true });\r\n\r\n        fetch('http://localhost:8080/list/users')\r\n            .then(response => { return response.json(); })\r\n            .then(data => this.setState({ users: data, isLoading: false, userDetails: [] }));\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <Header myUserLogin={this.state.userLogin}/>\r\n                <ContentList myUser={this.state.users} myLoading={this.state.myLoading} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Header extends React.Component {\r\n    render() {\r\n        const userLogin = this.props.myUserLogin;\r\n        return (\r\n            <Navbar inverse={true}>\r\n                <Navbar.Header>\r\n                    <Navbar.Brand>\r\n                        <a href=\"#home\">PT. XYZ - RMS</a>\r\n                    </Navbar.Brand>\r\n                </Navbar.Header>\r\n                <Navbar.Collapse>\r\n                    <Navbar.Text pullRight>\r\n                        Signed in as: <Navbar.Link href=\"#\">{userLogin}</Navbar.Link>\r\n                    </Navbar.Text>\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n        );\r\n    }\r\n}\r\n\r\nclass ContentList extends React.Component {\r\n    render() {\r\n        const users = this.props.myUser.map(user => <User key={user.id} user={user} />)\r\n        const isLoading = this.props.myLoading;\r\n        \r\n        if (isLoading) {\r\n            return <p>Loading...</p>;\r\n        }\r\n\r\n        return (\r\n            <Panel>\r\n                <Panel.Body>\r\n                    <Button className=\"buttonNew\" bsStyle=\"primary\">New</Button>\r\n                    <div>\r\n                        <Table striped bordered condensed hover>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Id</th>\r\n                                    <th>Name</th>\r\n                                    <th>User Name</th>\r\n                                    <th>Password</th>\r\n                                    <th colSpan=\"2\">Actions</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {users}\r\n                            </tbody>\r\n                        </Table>\r\n                    </div>\r\n                </Panel.Body>\r\n            </Panel>\r\n        );\r\n    }\r\n}\r\n\r\nclass User extends React.Component {\r\n    render() {\r\n        return (\r\n            <tr>\r\n                <td>{this.props.user.id}</td>\r\n                <td>{this.props.user.name}</td>\r\n                <td>{this.props.user.userName}</td>\r\n                <td><input className=\"hidetext\" size={80} type=\"password\" value= {this.props.user.password} readOnly={true}/></td>\r\n                <td>\r\n                    <Image id={this.props.user.id} rounded src=\"./img/pencil.png\"></Image>\r\n                    {/* <Button id={this.props.user.id} className=\"buttonEdit\" bsStyle=\"primary\">Edit</Button> */}\r\n                </td>\r\n                <td>\r\n                    <Image id={this.props.user.id} rounded src=\"./img/trash.png\"></Image>\r\n                    {/* <Button id={this.props.user.id} className=\"buttonDelete\" bsStyle=\"danger\">Delete</Button> */}\r\n                </td>\r\n            </tr>\r\n        );\r\n    }\r\n}\r\n\r\nexport default List;","import React from 'react';\r\nimport { FormGroup, Button, Modal, ControlLabel, FormControl, HelpBlock } from 'react-bootstrap';\r\n\r\nfunction FieldGroup({ id, label, help, ...props }) {\r\n    return (\r\n      <FormGroup controlId={id}>\r\n        <ControlLabel>{label}</ControlLabel>\r\n        <FormControl {...props} />\r\n        {help && <HelpBlock>{help}</HelpBlock>}\r\n      </FormGroup>\r\n    );\r\n  }\r\n\r\nclass Form extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"static-modal\">\r\n                <Modal.Dialog>\r\n                    <Modal.Header>\r\n                        <Modal.Title>Create New User</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <form>\r\n                            <FieldGroup\r\n                                id=\"formControlsText\"\r\n                                type=\"text\"\r\n                                label=\"Name\"\r\n                                placeholder=\"Enter name\"\r\n                            />\r\n                            <FieldGroup\r\n                                id=\"formControlsUserName\"\r\n                                type=\"username\"\r\n                                label=\"User Name\"\r\n                                placeholder=\"Enter user name\"\r\n                            />\r\n                            <FieldGroup id=\"formControlsPassword\" label=\"Password\" type=\"password\" />\r\n\r\n                        </form>\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button>Close</Button>\r\n                        <Button bsStyle=\"primary\">Save changes</Button>\r\n                    </Modal.Footer>\r\n                </Modal.Dialog>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Form;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter as Router, Route, Redirect } from \"react-router-dom\";\r\nimport Home from './jsx/App-login.jsx';\r\nimport Login from './jsx/App-login.jsx';\r\nimport List from './jsx/App-list.jsx';\r\nimport Form from './jsx/App-form.jsx';\r\nimport * as serviceWorker from './js/serviceWorker';\r\n\r\nReactDOM.render((\r\n    <Router>\r\n        <div>\r\n            <Route exact path=\"/\" render={() => (\r\n                <Redirect to=\"/home\"/>\r\n            )}/>\r\n            <Route path=\"/login\" component={Login} />\r\n            <Route path=\"/home\" component={Home} />\r\n            <Route path=\"/list\" component={List} />\r\n            <Route path=\"/form\" component={Form} />\r\n        </div>\r\n    </Router>\r\n\r\n), document.getElementById('app'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}